trigger:
  - main

variables:
  namespace:      'adkrish22290'
  repository:     'hello-world'
  tag:            '$(Build.BuildId)'
  imageName:      'quay.io/$(namespace)/$(repository)'
  quayUser:       'adkrish22290+adkrish22290'
  quayPassword:   '9ZDK923AF1H34Z34OM1PQHYBE7IFLCEXDF8V1N2CQRR6IFYJ5SOTJ45YCYX8YD14'

  # DigitalOcean Spaces (hard‚Äêcoded)
  SPACES_BUCKET:   'azure-testing'
  SPACES_ENDPOINT: 'https://azure-testing.blr1.digitaloceanspaces.com'
  SPACES_ACCESS_KEY: 'DO009J2Z99XLUZCHU7C9'
  SPACES_SECRET_KEY: 'soC/jnKysRxgy73eV1yFoQpoGvBcGitiHo43akJ9T9A'
  SPACES_REGION:    'blr1'

stages:
  #################################################
  # 1) Build & Push Docker image to Quay.io
  #################################################
  - stage: BuildAndPush
    displayName: 'Build & Push Docker Image'
    jobs:
      - job: BuildPush
        displayName: 'Build ‚Üí Push to Quay'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          - script: |
              echo "üîê Logging into Quay.io..."
              docker login quay.io -u $(quayUser) -p $(quayPassword)

              echo "üî® Building image: $(imageName):$(tag)"
              docker build -t $(imageName):$(tag) .

              echo "üì§ Pushing image: $(imageName):$(tag)"
              docker push $(imageName):$(tag)
            displayName: 'Login, Build & Push'

  #################################################
  # 2) Scan with Trivy (ignore zlib CVE), upload report
  #################################################
  - stage: ScanWithTrivy
    displayName: 'Scan with Trivy ‚Üí JSON & HTML ‚Üí Upload'
    dependsOn: BuildAndPush
    condition: succeeded()
    jobs:
      - job: TrivyScan
        displayName: 'Trivy ‚Üí JSON + HTML ‚Üí Upload ‚Üí Fail'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          # Install Trivy & AWS CLI
          - script: |
              echo "üì• Installing Trivy‚Ä¶"
              TRIVY_VERSION="0.33.0"
              wget -qO- \
                https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz \
                | sudo tar xz -C /usr/local/bin trivy
              sudo chmod +x /usr/local/bin/trivy

              echo "üì• Installing AWS CLI‚Ä¶"
              python3 -m pip install --user awscli
              export PATH="$HOME/.local/bin:$PATH"

              echo "‚úÖ Tools ready: $(trivy --version | head -n1) & $(aws --version)"
            displayName: 'Install Tools'

          # Create .trivyignore to suppress zlib CVE
          - script: |
              cat <<EOF > .trivyignore
              CVE-2023-45853
              EOF
              echo "‚ÑπÔ∏è .trivyignore contents:"
              cat .trivyignore
            displayName: 'Generate .trivyignore'

          # Pull image and refresh DB
          - script: |
              echo "üîÑ Refreshing Trivy DB‚Ä¶"
              trivy image --download-db-only

              echo "üîê Logging into Quay.io & pulling image‚Ä¶"
              echo "$(quayPassword)" | docker login quay.io -u "$(quayUser)" --password-stdin
              docker pull $(imageName):$(tag)
            displayName: 'Login & Pull'

          # Run scan, produce JSON+HTML, upload report, fail on remaining CRITICALs
          - script: |
              IMAGE=$(imageName):$(tag)
              IGNORE_OPTS="--ignorefile .trivyignore"

              echo "üîç Scanning ${IMAGE} for CRITICAL CVEs (ignoring CVE-2023-45853)‚Ä¶"

              # JSON report
              trivy image $IGNORE_OPTS --quiet --format json --severity CRITICAL "${IMAGE}" > trivy-report.json

              # HTML report
              wget -qO html.tpl \
                https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
              trivy image $IGNORE_OPTS \
                --quiet \
                --format template \
                --template "@html.tpl" \
                --severity CRITICAL \
                "${IMAGE}" > trivy-report.html

              # Print any remaining CRITICALs
              echo "üõ°Ô∏è Remaining CRITICAL vulnerabilities:"
              jq -r '
                .Results[]? 
                | .Vulnerabilities[]? 
                | select(.Severity=="CRITICAL") 
                | "\(.VulnerabilityID) | \(.PkgName)@\(.InstalledVersion) -> \(.FixedVersion) | \(.Title)"' \
                trivy-report.json || true

              # Count & upload
              COUNT=$(jq '[.Results[]? | .Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json)
              echo "üî¢ Total CRITICAL CVEs (post-ignore): $COUNT"

              echo "üì§ Uploading HTML report to DO Spaces‚Ä¶"
              export AWS_ACCESS_KEY_ID=$(SPACES_ACCESS_KEY)
              export AWS_SECRET_ACCESS_KEY=$(SPACES_SECRET_KEY)
              export AWS_DEFAULT_REGION=$(SPACES_REGION)
              aws --endpoint-url "$(SPACES_ENDPOINT)" s3 cp \
                trivy-report.html \
                s3://$(SPACES_BUCKET)/trivy-report-$(tag).html \
                --acl public-read

              echo "üì¢ Report URL: $(SPACES_ENDPOINT)/$(SPACES_BUCKET)/trivy-report-$(tag).html"

              if [ "$COUNT" -gt 0 ]; then
                echo "‚ùå Failing pipeline due to $COUNT CRITICAL CVE(s)."
                exit 1
              fi

              echo "‚úÖ No CRITICAL CVEs‚Äîpipeline passes."
            displayName: 'Scan ‚Üí Upload ‚Üí Fail'
            env:
              quayUser:         $(quayUser)
              quayPassword:     $(quayPassword)
              SPACES_ACCESS_KEY: $(SPACES_ACCESS_KEY)
              SPACES_SECRET_KEY: $(SPACES_SECRET_KEY)
              SPACES_REGION:     $(SPACES_REGION)
              SPACES_ENDPOINT:   $(SPACES_ENDPOINT)

  #################################################
  # 3) Deploy to DigitalOcean droplet via SSH
  #################################################
  - stage: DeployToDroplet
    displayName: 'Deploy to DigitalOcean Droplet'
    dependsOn: ScanWithTrivy
    condition: succeeded()
    jobs:
      - job: DeployApp
        displayName: 'SSH & Deploy Container'
        pool:
          name: 'do-pool'
        steps:
          - checkout: self

          - task: SSH@0
            displayName: 'üõú SSH & deploy container'
            inputs:
              sshEndpoint: 'DO-SSH'
              runOptions: 'inline'
              inline: |
                set -e

                echo "üîê Logging into Quay.io"
                docker login quay.io \
                  -u $(quayUser) \
                  -p $(quayPassword)

                echo "üì• Pulling image $(imageName):$(tag)"
                docker pull $(imageName):$(tag)

                echo "üõë Stopping old container (if any)"
                docker rm -f hello-world || true

                echo "üöÄ Launching new container"
                docker run -d \
                  --name hello-world \
                  --restart unless-stopped \
                  -p 80:4999 \
                  $(imageName):$(tag)
            env:
              quayUser:     $(quayUser)
              quayPassword: $(quayPassword)